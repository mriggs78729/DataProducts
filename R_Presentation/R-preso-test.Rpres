Calculation of Pi Using the Monte Carlo Method
========================================================
author: Michael Riggs
date: 12/19/2014

Overview
========================================================
- "Monte Carlo Method" - method of solving problems with simulation of random events.
- Given an probability "P" of an event, generate random event
- Calculate P as #successful Events/#Events
- To esitmate Pi , generate 2 random numbers in (-1,1) 
- If each are X&Y points inside a square,
  then P(X,Y) inside the circle P(sqrt(x^2 + y^2 ) <1) is Pi/4
- More points in the simulation will generally give better accuracy

- Ref - http://www.eveandersson.com/pi/monte-carlo-circle

How to use the app
========================================================
- Go to https://mriggs78729.shinyapps.io/DataProducts/
- Select the number of points for the application
- Simulation will run
- Pi estimate is in the plot title

- More points will *generally* be more accurate

Example using 1000 points
========================================================

```{r, echo=FALSE}
    num_points <- 1000
    x_points <- runif(num_points, -1,1)
    y_points <- runif(num_points, -1,1)  
 
    dist=sqrt(x_points*x_points+y_points*y_points)
    is_inside <- dist<1
    count_inside <- sum(is_inside)
    pi_guess <- 4*count_inside /num_points
    title <- sprintf("Monte Carlo Simulation to calculate PI\n Estimate is %4.3f - Error %3.2f percent", pi_guess, 100*(pi-pi_guess)/pi)
    plot(x_points,y_points, col=is_inside+1, main=title)

    theta = seq(0, 2*pi, 0.01)
    x <- cos(theta)
    y <- sin(theta)
    lines(x,y)
```
Example using 500 points
========================================================

```{r, echo=FALSE}
    num_points <- 1000
    x_points <- runif(num_points, -1,1)
    y_points <- runif(num_points, -1,1)  
 
    dist=sqrt(x_points*x_points+y_points*y_points)
    is_inside <- dist<1
    count_inside <- sum(is_inside)
    pi_guess <- 4*count_inside /num_points
    title <- sprintf("Monte Carlo Simulation to calculate PI\n Estimate is %4.3f - Error %3.2f percent", pi_guess, 100*(pi-pi_guess)/pi)
    plot(x_points,y_points, col=is_inside+1, main=title)

    theta = seq(0, 2*pi, 0.01)
    x <- cos(theta)
    y <- sin(theta)
    lines(x,y)
```

